@model dynamic

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_FormLayout.cshtml";
}

<h2>Create New Quotation</h2>


<div class="row">
    <div class="col-md-12">

        <div class="form-group">
            <label>Search Stock Items</label>
            <div class="tt-container">
                <input placeholder="place your search value here." type="text" id="stockItem" value="" class="form-control" />
            </div>
        </div>

        <div class="form-group">
            <label>Add Customer</label>
            <div class="tt-container">
                <input placeholder="place your search value here." type="text" id="customer" value="" class="form-control" />
            </div>
        </div>

        <br />

        <table class="table table-hover col-md-12" id="tableDetails">
            <thead>
                <tr>
                    <th style="width: 280px">Stock Item Name</th>
                    <th>Cost Per Unit</th>
                    <th>Quantity</th>
                    <th>Total</th>
                    <th style="width: 20px"></th>
                </tr>
            </thead>
            <tbody id="itemDetails"></tbody>
            <tfoot>
                <tr>
                    <td></td>
                    <td></td>
                    <td class="text-right"><strong> Total:</strong></td>
                    <td><strong id="SubTotal">00.00</strong></td>
                    <td></td>
                </tr>
            </tfoot>

        </table>

        <div class="row">
            <div class="col-md-5">
                <div id="dvDistance"></div>
                @*<div class="form-group">
                        <label for="Date"> Select Distance : </label>
                        @Html.DropDownList("Distance", new List<SelectListItem>
                        {
                            new SelectListItem() {Text = "10 Km", Value = "10"},
                            new SelectListItem() {Text = "20 Km", Value = "20"},
                            new SelectListItem() {Text = "30 Km", Value = "30"},
                            new SelectListItem() {Text = "50 Km", Value = "50"},
                            new SelectListItem() {Text = "70 Km", Value = "70"},
                            new SelectListItem() {Text = "100 Km", Value = "70"},
                            new SelectListItem() {Text = "Not Relevant", Value = "0"},
                        }, "Select Distance", new {@class = "form-control"})

                        <small id="error_Payment" class="form-text error_msg">Select Payment Method</small>
                    </div>*@
            </div>

            <div class="col-md-3 col-md-offset-3">

            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="Discount"> Discount : </label>
                    <input class="form-control" id="Discount" value="0" type="number" onchange="DiscountAmount()" />
                    <small id="error_Discount" class="form-text error_msg">Discount can't be empty</small>
                </div>
                <div class="form-group">
                    <label for="GrandTotal"> Grand Total : </label>
                    <input type="text" id="GrandTotal" class="form-control" readonly />
                    <small id="error_GrandTotal" class="form-text error_msg">Total is empty</small>
                </div>
            </div>
        </div>
        <br />

        <div id="invoiceTotal">
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-3">
                <input id="postButton" type="submit" value="Create Quotation" class="btn btn-default" />
            </div>
        </div>

    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?sensor=false&libraries=places&key=AIzaSyD5kWpfAZSDb92WM9UUSmN_psKjmDiey4w"></script>
    <script>

        var source, destination;
        var directionsDisplay;
        var directionsService = new google.maps.DirectionsService();
        //google.maps.event.addDomListener(window, 'load', function () {
        //    new google.maps.places.SearchBox(document.getElementById('txtSource'));
        //    new google.maps.places.SearchBox(document.getElementById('txtDestination'));
        //    directionsDisplay = new google.maps.DirectionsRenderer({ 'draggable': true });
        //});

        function GetRoute() {
            var durban = new google.maps.LatLng(-29.760725, 31.062702);
            var mapOptions = {
                zoom: 15,
                center: durban
            };
            //map = new google.maps.Map(document.getElementById('dvMap'), mapOptions);
            //directionsDisplay.setMap(map);
            //directionsDisplay.setPanel(document.getElementById('dvPanel'));

            //*********DIRECTIONS AND ROUTE**********************//
            //source = document.getElementById("txtSource").value;
            //destination = document.getElementById("txtDestination").value;

            var request = {
                origin: "16 Rosedale Place, Kloof, Durban",
                destination: "22 Station Drive, Durban",
                travelMode: google.maps.TravelMode.DRIVING
            };
            directionsService.route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                }
            });

            //*********DISTANCE AND DURATION**********************//
            var service = new google.maps.DistanceMatrixService();
            //
            service.getDistanceMatrix({
                origins: [source],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function (response, status) {
                if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                    var distance = response.rows[0].elements[0].distance.text;
                    var duration = response.rows[0].elements[0].duration.text;
                    var dvDistance = document.getElementById("dvDistance");
                    dvDistance.innerHTML = "";
                    dvDistance.innerHTML += "Distance: " + distance + "<br />";
                    dvDistance.innerHTML += "Duration:" + duration;
                }
                else {
                    alert("Unable to find the distance via road.");
                }
            });
        }


        $(document).ready(function () {

            GetRoute();
            var vm = {
                stockItemIds: []
            };

            var vmList = {
                stockItemModels: []
            };

            var personId = 0;
            var personAddress = "";

            var stockItems = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    //target get endpoint.
                    url: '/api/stockItem?value=%QUERY',
                    wildcard: '%QUERY'
                }
            });
            //
            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('Name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/Customer?value=%QUERY',
                    wildcard: '%QUERY'
                }
            });
            //
            $("#customer").typeahead({
                    minLength: 3,
                    highlight: true
                },
                {
                    name: 'Customers',
                    display: 'Name',
                    source: customers
                }).on("typeahead:select", function (e, customer) {
                personAddress = customer.Address;
                personId = customer.Id;
            });
            //
            $('#stockItem').typeahead({
                    minLength: 2,
                    highlight: true
                },
                {
                    name: 'stockItems',
                    display: 'Name',
                    source: stockItems
                }).on("typeahead:select", function (e, stockItem) {
                var productItem = '<tr><td data-val="' + stockItem.Id + '">' + stockItem.Name
                    + '</td><td class="price">' + stockItem.SellingPrice
                    + '</td> <td>'
                    + '<input style="width:110px;" class="quantity" type= "number" min= "1" step= "1" value= "1" />'
                    + '</td><td class="amount">'
                    + stockItem.SellingPrice
                    + '</td><td><a data-itemId="'
                    + 0
                    + '" href="#" class="deleteItem"><i class="icon-trash"></i></a></td></tr>';

                $("#itemDetails").append(productItem);
                //
                calculateSum();

                //"<li class='list-group-item'>" + stockItem.Name + "</li>"

                $("#stockItem").typeahead("val", "");
                vm.stockItemIds.push(stockItem.Id);
                vmList.stockItemModels.push(stockItem);
            });

            $(document).on('change',
                '.quantity',
                function (e) {
                    var quantity = parseInt($(this).val());
                    var price = parseFloat($(this).closest('tr').children('td:eq(1)').text());
                    var sum = quantity * price;
                    $(this).closest('tr').children('td:eq(3)').text(sum.toFixed(2));
                    calculateSum();
                });
            //
            //
            $(document).on('click', 'a.deleteItem', function (e) {
                e.preventDefault();
                var $self = $(this);
                $(this).parents('tr').css("background-color", "#1f306f").fadeOut(800, function () {
                    $(this).remove();
                    calculateSum();
                });
            });
            //
            function discountAmount() {
                var b = parseFloat($('#Discount').val()).toFixed(2);
                if (isNaN(b)) return;
                var a = parseFloat($('#SubTotal').text()).toFixed(2);
                var c = parseFloat(a - b).toFixed(2);
                $('#GrandTotal').val(c);
            }
            //
            function calculateSum() {
                var sum = 0;
                // iterate through each td based on class and add the values
                $(".amount").each(function () {

                    var value = $(this).text();
                    // add only if the value is number
                    if (!isNaN(value) && value.length !== 0) {
                        sum += parseFloat(value);
                    }
                });
                //
                if (sum == 0.0) {
                    $('#Discount').val(0);
                    $('#GrandTotal').text("0");
                }
                //console.log(sum);
                $('#SubTotal').text(sum.toFixed(2));
                $('#GrandTotal').val(sum.toFixed(2));
                //
                var b = parseFloat($('#Discount').val()).toFixed(2);
                if (isNaN(b)) return;
                var a = parseFloat($('#SubTotal').text()).toFixed(2);
                var c = parseFloat(a - b).toFixed(2);
                $('#GrandTotal').val(c);
            };
            //


            //
            $("#postButton").click(function (e) {
                //
                e.preventDefault();
                //
                var orderArray = [];
                orderArray.Length = 0;
                //
                $.each($("#tableDetails tbody tr"), function () {
                    orderArray.push({
                        Identifier: $(this).find('td:eq(0)').data("val"),
                        Name: $(this).find('td:eq(0)').html(),
                        Price: parseFloat($(this).find('td:eq(1)').html()),
                        Quantity: parseInt($(this).find('.quantity').val()),
                        Amount: parseFloat($(this).find('td:eq(3)').html())
                    });
                });
                //
                var data = JSON.stringify({
                    CustomerId: personId,
                    CustomerName: $("#Customer").val(),
                    Distance: $("#Distance").val(),
                    Discount: $("#Discount").val(),
                    OrderArray: orderArray
                });
                //
                console.log(data);
                //
                $.when(saveOrder(data)).then(function (response) {
                    console.log(response);
                    location.href = "/quotation/index";
                }).fail(function (err) {
                    location.href = "/quotation/index";
                });
            });

            //
        });

        function saveOrder(data) {
            return $.ajax({
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                type: 'POST',
                url: "/api/Quotation",
                data: data
            });
        }




        //
    </script>

    



}
