using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Web;
using System.Web.Mvc;
using InvoiceService;
using JobCardSystem.Core;
using JobCardSystem.Core.Domain;
using JobCardSystem.Core.Domain.Configurations;
using JobCardSystem.Core.ViewModels;
using JobCardSystem.Persistence;
using Microsoft.AspNet.Identity;

namespace JobCardSystem.Controllers
{
    public class PurchaseOrderController : ApplicationBaseController
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly ApplicationDbContext _context;
        public PurchaseOrderController(IUnitOfWork unitOfWork)
        {
            _unitOfWork = unitOfWork;
            _context = new ApplicationDbContext();
        }

        public ActionResult Download(int? id)
        {
            if (id.HasValue)
            {
                var quote = _unitOfWork.Quotes.SingleOrDefault(s => s.Id == id);
                var customer = _unitOfWork.Customers.SingleOrDefault(s => s.Id == quote.CustomerId);
                var stockItemQuantities = _unitOfWork.StockItemQuantities.GetStockItemsForQuote(quote.Id);

                InvoiceService.Business business = new InvoiceService.Business()
                {
                    LogoRootPath = HttpContext.Server.MapPath("~//Content//Assets//Images//abstergo.gif"),
                    CompanyName = "Abstergo (Pty) Ltd",
                    EmailAddress = "info@abstergo.co.za",
                    WebsiteAddress = "www.abstergo.co.za",
                    PhoneNumber = "031 100 8096",
                    PhysicalAddress = "16 Rosedale Place, Kloof",
                    BankAccountNumber = "62746768235",
                    BankBranchCode = "250 655",
                    SwiftCode = "FIRNZAJJXXX",
                    BankReferenceNumber = "#1561607274945",

                };

                InvoiceService.Client client = new Client(
                    customer.Name,
                    customer.Surname,
                    customer.CellNumber,
                    customer.Email,
                    customer.Address);

                List<InvoiceService.InvoiceItem> invoiceItems = new List<InvoiceItem>();

                foreach (var item in stockItemQuantities)
                {
                    var inv = new InvoiceItem()
                    {
                        Id = item.StockItemId,
                        Name = item.StockItem.Name,
                        Price = item.StockItem.SellingPrice,
                        Quantity = item.Quantity
                    };
                    invoiceItems.Add(inv);
                }

                string docname;

                if (quote.Approve == true)
                {
                    docname = "Invoice";
                }
                else
                {
                    docname = "Quotation";
                }

                InvoiceService.Invoice invoice = new InvoiceService.Invoice()
                {
                    Client = client,
                    Business = business,
                    InvoiceItems = invoiceItems,
                    //
                    Currency = "R",


                    Title = docname,
                    InvoiceNumber = "1561607274945",
                    Discount = 0,
                    Status = "Due",
                    Notes = "Thank you for your business.",
                    Terms = "Sales Invoice generated by Abstergo (Pty) Ltd. Visit our website at www.abstergo.net for more information.",
                    Date = DateTime.Now,
                };

                InvoiceService.Generate invoiceGeneration = new Generate();

                byte[] pdfBytes = invoiceGeneration.GetInvoice(invoice);
                return File(pdfBytes, "application/pdf",
                    fileDownloadName: DateTime.Now.ToShortDateString()
                                      + "_Invoice_"
                                      + invoice.Business.BankReferenceNumber + ".pdf");
            }
            else
            {
                return RedirectToAction("Index", "Dashboard");
            }
        }
        // GET: PurchaseOrder
        public ActionResult Index()
        {
            var list = _unitOfWork.PurchaseOrders.GetPurchaseOrdersWithSupplierDetails();
            return View(list);
        }

        public ActionResult Create()
        {
            //TempPurchaseOrderViewModel purchaseOrderViewModel = new TempPurchaseOrderViewModel();
            //* When we use Javascript we can restrict a user from being able to select a product that does not match something a supplier offers. */
            //purchaseOrderViewModel.StockItems = _unitOfWork.StockItems.GetAll().ToList();
            //purchaseOrderViewModel.Suppliers = _unitOfWork.Suppliers.GetAll().ToList();
            //
            return View();
        }

        [HttpPost]
        public ActionResult Create(TempPurchaseOrderViewModel purchaseVm)
        {
            //if (ModelState.IsValid)
            //{
            //    PurchaseOrder purchaseOrder = new PurchaseOrder();
            //    purchaseOrder.SupplierId = purchaseVm.SupplierId;
            //    purchaseOrder.Supplier = _unitOfWork.Suppliers.Get(purchaseOrder.SupplierId);
            //    //
            //    //var userId = User.Identity.GetUserId();
            //    //var userFromDb = _context.Users.SingleOrDefault(u => u.Id == userId);
            //    _unitOfWork.PurchaseOrders.Add(purchaseOrder);
            //    int purchaseOrderId = _unitOfWork.Complete();

            //    var stockItemList = _unitOfWork.StockItems.GetStockItems(purchaseVm.PurchaseOrderItemsIdArray);
            //    var PoiList = new List<PurchaseOrderItem>();
            //    foreach (var item in purchaseVm.PurchaseOrderItemsIdArray)
            //    {
            //        var Poi = new PurchaseOrderItem()
            //        {
            //            StockItemId = item,
            //            PurchaseOrderId = purchaseOrderId,
            //            AmountOfItems = 1
            //        };
            //        PoiList.Add(Poi);
            //    }
            //    _unitOfWork.PurchaseOrderItems.AddRange(PoiList);
            //    _unitOfWork.Complete();
            //}
            //else
            //{
            //    return View(purchaseVm);
            //}
            return RedirectToAction("Index");
        }

        public ActionResult GetOrderItemsFromSupplier(int id)
        {
            //Note: Use this space to populate the dropdown list for the product list.
            var returnList = _unitOfWork.StockItems.GetStockItemsWithSupplierId(id);
            return Json(returnList);
        }

        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return HttpNotFound();
            }
            var list = _unitOfWork.PurchaseOrderItems.GetPurchaseOrderItemsEagerStock((int)id);
            return View(list);
        }

        public ActionResult DeleteStockItem(int? id)
        {
            if (id != null)
            {
                var purhcaseOrderItem = _unitOfWork.PurchaseOrderItems.Get((int) id);
                _unitOfWork.PurchaseOrderItems.Remove(purhcaseOrderItem);
                _unitOfWork.Complete();
                return RedirectToAction("Details", new {id=purhcaseOrderItem.PurchaseOrderId});
            }
            else
            {
                return HttpNotFound();
            }
        }

        public ActionResult Edit(int? id)
        {
            if (id != null)
            {
                var purhcaseOrderItem = _unitOfWork.PurchaseOrderItems.Get((int) id);
                return View("EditItem", purhcaseOrderItem);
            }
            else return HttpNotFound();
        }

        [HttpPost]
        public ActionResult Edit(PurchaseOrderItem item)
        {
            if (ModelState.IsValid)
            {
                _unitOfWork.PurchaseOrderItems.Update(item);
                _unitOfWork.Complete();
            }
            return RedirectToAction("Details", new {id = item.PurchaseOrderId});
        }
    }
}